-- programs ------------------------------------------------
entrypoints     Program ;
Program_T.      Program ::= [TopDef] ;
ProcDecl_T.     TopDef ::= RetVal Ident "(" [Arg] ")" ";" ;
ListGlobDecl_T. TopDef ::= "list" Type Ident "=" "[" [Expr] "]" ";" ;
ProcDef_T.      TopDef ::= RetVal Ident "(" [Arg] ")" Block ;
GlobVar_T.      TopDef ::= "Glob" Type Ident "=" Expr ";" ;
Gener_T.        TopDef ::= "Gen" Type Ident "(" [Arg] ")" Block ;
separator       TopDef "" ;
Arg_T. 	        Arg ::= Type Ident ;
ArgList_T. 	    Arg ::= "list" Ident ;
separator       Arg "," ;
-- statements ----------------------------------------------
Block_T.        Block ::= "{" [Stmt] "}" ;
separator       Stmt "" ;
Empty_T.        Stmt ::= ";" ;
BStmt_T.        Stmt ::= Block ;
Decl_T.         Stmt ::= Type Ident "=" Expr ";" ;
Ass_T.          Stmt ::= Ident "=" Expr  ";" ;
Incr_T.         Stmt ::= Ident "++"  ";" ;
Decr_T.         Stmt ::= Ident "--"  ";" ;
Break_T.        Stmt ::= "break" ";" ;
Continue_T.     Stmt ::= "continue" ";" ;
Cond_T.         Stmt ::= "if" "(" Expr ")" Block  ;
CondElse_T.     Stmt ::= "if" "(" Expr ")" Block "else" Block  ;
While_T.        Stmt ::= "while" "(" Expr ")" Block ;
Return_T.       Stmt ::= "return" "(" Expr ")" ;
Yield_T.        Stmt ::= "yield" "(" Expr ")" ;
DeclGen_T.      Stmt ::= "gen" Ident "=" Ident "(" [FunArg] ")" ";" ;
ForGen_T.       Stmt ::= "for" "(" Ident "in" Ident "(" [FunArg] ")" ")" Block ;
DeclList_T.     Stmt ::= "list" Type Ident "=" "[" [Expr] "]" ";" ;
PushToList_T.   Stmt ::= Ident ".push" "(" Expr ")" ";" ;
PopFromList_T.  Stmt ::= Ident ".pop" ";" ;
AddToList_T.    Stmt ::= Ident ".add" "(" Expr ").(" Expr ")" ";" ;
RemoveFromList_T.  Stmt ::= Ident ".remove" "(" Expr ")" ";" ;
SExp_T.         Stmt ::= Expr  ";" ;
-- Types ---------------------------------------------------
Int_T.          Type ::= "int" ;
CharT_T.        Type ::= "char" ;
Str_T.          Type ::= "string" ;
Bool_T.         Type ::= "bool" ;
FunRetVal_T.    RetVal ::= Type ;
FunRetVoid_T.   RetVal ::= "Proc" ;
-- Expressions ---------------------------------------------
Var_T.          Var ::= Ident ;
EListElem_T.    Expr7 ::= Ident "[" Expr "]" ;
EVar_T.         Expr7 ::= Var ;
ELitInt_T.      ELit ::= Integer ;
ELitTrue_T.     EBool ::= "true" ;
ELitFalse_T.    EBool ::= "false" ;
ELitBool_T.     ELit ::= EBool ;
ELit_T.         Expr7 ::= ELit ;
EListLen_T.     Expr7 ::= Ident ".len" ;
App_T.          Expr7 ::= Ident "(" [FunArg] ")" ;
AsValue_T.      FunArg ::= Expr ;
AsRef_T.        FunArg ::= "&" Var ;
separator       FunArg "," ;
EString_T.      ELit ::= String ;
EChar_T.        ELit ::= Char ;
Neg_T.          Expr6 ::= "-" Expr7 ;
Not_T.          Expr6 ::= "!" Expr7 ;
EMul_T.         Expr5 ::= Expr5 MulOp Expr6 ;
EAdd_T.         Expr4 ::= Expr4 AddOp Expr5 ;
ERel_T.         Expr3 ::= Expr3 RelOp Expr4 ;
EAnd_T.         Expr2 ::= Expr3 "&&" Expr2 ;
EOr_T.          Expr1 ::= Expr2 "||" Expr1 ;
ECast_T.        Expr6 ::= "(" Type ")" Expr6 ;
EGenNext_T.     Expr6 ::= "next" "(" Ident ")" ;
coercions       Expr 7 ;
separator       Expr "," ;
-- operators -----------------------------------------------
Plus_T.         AddOp ::= "+" ;
Minus_T.        AddOp ::= "-" ;
Times_T.        MulOp ::= "*" ;
Div_T.          MulOp ::= "/" ;
Mod_T.          MulOp ::= "%" ;
LTH_T.          RelOp ::= "<" ;
LE_T.           RelOp ::= "<=" ;
GTH_T.          RelOp ::= ">" ;
GE_T.           RelOp ::= ">=" ;
EQU_T.          RelOp ::= "==" ;
NE_T.           RelOp ::= "!=" ;
-- comments ------------------------------------------------
comment         "#" ;
comment         "//" ;
comment         "/*" "*/" ;
